import copy

spreadsheet_path="SE_Block_Info.csv"
table_header=["blockname","type_id","subtype_id","grid_size","armor_type","description","build_time_secs","pcu_pc","pcu_console","airtightness",
              "recipe_SteelPlate","recipe_MetalGrid","recipe_Construction","recipe_LargeTube","recipe_Thrust","recipe_Motor","recipe_Reactor","recipe_BulletproofGlass","recipe_Computer","recipe_Detector","recipe_Display","recipe_Explosives","recipe_Girder","recipe_GravityGenerator","recipe_InteriorPlate","recipe_SmallTube","recipe_Medical","recipe_SolarCell","recipe_Superconductor","recipe_RadioCommunication","recipe_ZoneChip","recipe_PowerCell","recipe_EngineerPlushie","recipe_SabiroidPlushie",
              "recipe_SteelPlate_optional","recipe_MetalGrid_optional","recipe_Construction_optional","recipe_LargeTube_optional","recipe_Thrust_optional","recipe_Motor_optional","recipe_Reactor_optional","recipe_BulletproofGlass_optional","recipe_Computer_optional","recipe_Detector_optional","recipe_Display_optional","recipe_Explosives_optional","recipe_Girder_optional","recipe_GravityGenerator_optional","recipe_InteriorPlate_optional","recipe_SmallTube_optional","recipe_Medical_optional","recipe_SolarCell_optional","recipe_Superconductor_optional","recipe_RadioCommunication_optional","recipe_ZoneChip_optional","recipe_PowerCell_optional",
              "mountpoint_Front","mountpoint_Back","mountpoint_Left","mountpoint_Right","mountpoint_Bottom","mountpoint_Top","DLC","standalone"]
component_list=["Steel Plate","Interior Plates","Girder","Metal Grid",
                "Construction Comp.","Small Steel Tube","Large Steel Tube","Radio-comm Comp.","Zone Chip",
                "Computer","Motor","Display","Bulletproof Glass","Engineer Plushie","Sabiroid Plushie",
                "Detector Components","Explosives","Solar Cell","Reactor Components","Power Cell",
                "Thruster Components","Medical Components","Gravity Components","Superconductor"]

debugmode=False
def debugprint(s):
    if(debugmode):
        print(s)

content={}
blockdict={}
firstRow=True

def lookUpColumn(linesplit,columnName):
    return linesplit[table_header.index(columnName)]

def lookUpComponentIndex(i):
    #TODO: von 1-10
    return component_list.index(i)+1

def saveOneRow(uiname,dataname,linesplit):
    gridsize=lookUpColumn(linesplit,'grid_size')
    content[gridsize+"\t"+uiname] = lookUpColumn(linesplit,dataname)

with open(spreadsheet_path,'r') as fin:
    lines = fin.readlines()
    for line in lines:
        #skip table header 
        if(not firstRow):
            # alle Spalten des Blocks als Liste
            linesplit=line.split('\t')
            blockname=lookUpColumn(linesplit,'blockname')
            debugprint(blockname)
            content={} # reset
            saveOneRow('Steel Plate','recipe_SteelPlate',linesplit)
            saveOneRow('Metal Grid','recipe_MetalGrid',linesplit)
            saveOneRow('Construction Comp.','recipe_Construction',linesplit)
            saveOneRow('Large Steel Tube','recipe_LargeTube',linesplit)
            saveOneRow('Thruster Components','recipe_Thrust',linesplit)
            saveOneRow('Motor','recipe_Motor',linesplit)
            saveOneRow('Reactor Components','recipe_Reactor',linesplit)
            saveOneRow('Bulletproof Glass','recipe_BulletproofGlass',linesplit)
            saveOneRow('Computer','recipe_Computer',linesplit)
            saveOneRow('Detector Components','recipe_Detector',linesplit)
            saveOneRow('Display','recipe_Display',linesplit)
            saveOneRow('Explosives','recipe_Explosives',linesplit)
            saveOneRow('Girder','recipe_Girder',linesplit)
            saveOneRow('Gravity Components','recipe_GravityGenerator',linesplit)
            saveOneRow('Interior Plates','recipe_InteriorPlate',linesplit)
            saveOneRow('Small Steel Tube','recipe_SmallTube',linesplit)
            saveOneRow('Medical Components','recipe_Medical',linesplit)
            saveOneRow('Solar Cell','recipe_SolarCell',linesplit)
            saveOneRow('Superconductor','recipe_Superconductor',linesplit)
            saveOneRow('Radio-comm Comp.','recipe_RadioCommunication',linesplit)
            saveOneRow('Zone Chip','recipe_ZoneChip',linesplit)
            saveOneRow('Engineer Plushie','recipe_EngineerPlushie',linesplit)
            saveOneRow('Sabiroid Plushie','recipe_SabiroidPlushie',linesplit)
            saveOneRow('Power Cell','recipe_PowerCell',linesplit)
            if(blockname in blockdict):
                blockdict[blockname].update(content.copy()) # copy()!
            else:
                blockdict[blockname]=content.copy()
        firstRow=False #skip table header 

debugprint(blockdict)

for blockname,entry in blockdict.items():
    debugprint("\n\n"+blockname)
    print("{{Recipeinfo")
    print("|product="+blockname)
    for component,count in entry.items():
        debugprint(component)
        size,comp=component.split('\t')
        if(int(count) > 0):
            # TODO Duplikat vermeiden
            print("|component"+str(lookUpComponentIndex(comp))+"="+comp)    
            if(int(count) > 0 and size == 'Large'):
                print("  |required"+str(lookUpComponentIndex(comp))+"="+str(count))
            elif(int(count) > 0 and size == 'Small'):
                print("  |smlrequired"+str(lookUpComponentIndex(comp))+"="+str(count))
    print("}}\n")
